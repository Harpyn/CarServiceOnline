@page "/car/create"
@page "/car/edit/{Id:int}"

@using Models
@using Common.Enums.Car
@using Business.Repository.IRepository
@inject ICarRepository CarRepository
@inject ICarImagesRepository CarImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<div class="row mt-4">
    <h3 class="card-title text-info mb-3 ml-3">@Title</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="CarModel" OnValidSubmit="HandleCarUpsert">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Název (pro identifikaci)</label>
                        <InputText @bind-Value="CarModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>CarModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Značka</label>
                        <InputSelectEnum @bind-Value="CarModel.CarBrand" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Model</label>
                        <InputText @bind-Value="CarModel.Model" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Karoserie</label>
                        <InputSelectEnum @bind-Value="CarModel.VehicleType" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Palivo</label>
                        <InputSelectEnum @bind-Value="CarModel.FuelType" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Objem</label>
                        <InputNumber @bind-Value="CarModel.CubicCapacity" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Výkon</label>
                        <InputNumber @bind-Value="CarModel.Power" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Datum nákupu</label>
                        <InputDate @bind-Value="CarModel.DateOfPurchase" class="form-control"></InputDate>
                    </div>
                    <div class="form-group">
                        <label>Datum první registrace</label>
                        <InputDate @bind-Value="CarModel.FirstRegistration" class="form-control"></InputDate>
                    </div>
                    <div class="form-group">
                        <label>Barva</label>
                        <InputText @bind-Value="CarModel.Color" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Státní poznávací značka</label>
                        <InputText @bind-Value="CarModel.LicensePlate" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>VIN</label>
                        <InputText @bind-Value="CarModel.VIN" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Nájezd</label>
                        <InputNumber @bind-Value="CarModel.Kilometer" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Počet předchozí majitelů</label>
                        <InputNumber @bind-Value="CarModel.Owners" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (CarModel.ImageUrls != null && CarModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in CarModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="car-image" style="background: url('@roomImage') 50% 50%; ">
                                            <span class="car-image-title">@serial</span>
                                        </div>

                                        <button type="button" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink href="car/list" class="btn btn-secondary">Zpět na seznam</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private CarDTO CarModel { get; set; } = new CarDTO();
    private string Title { get; set; } = "Přidat vozidlo";
    private CarImageDTO CarImage { get; set; } = new CarImageDTO();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Upravit údaje o vozidle";
            CarModel = await CarRepository.GetCar(Id.Value);
        }
        else
        {
            //create
            CarModel = new CarDTO();
        }
    }

    private async Task HandleCarUpsert()
    {
        try
        {
            var carByName = await CarRepository.IsCarUnique(CarModel.Name, CarModel.Id);
            if (carByName != null)
            {
                await JsRuntime.ToastrError("Zadané vozidlo již existuje.");
                return;
            }

            if (CarModel.Id != 0 && Title == "Upravit údaje o vozidle")
            {
                var updateCarResult = await CarRepository.UpdateCar(CarModel.Id, CarModel);
                await JsRuntime.ToastrSuccess("Změny byly úspěšně provedeny.");
            }
            else
            {
                var createdResult = await CarRepository.CreateCar(CarModel);
                await AddCarImage(createdResult);
                await JsRuntime.ToastrSuccess("Vozidlo úspěšně přidáno.");
            }
        }
        catch (Exception)
        {

            throw;
        }


        NavigationManager.NavigateTo("car/list");
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if(e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrWarning("Povolené formáty jsou pouze .jpg .png .jpeg");
                    }
                }
                if(images.Any())
                {
                    if(CarModel.ImageUrls!=null && CarModel.ImageUrls.Any())
                    {
                        CarModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        CarModel.ImageUrls = new List<string>();
                        CarModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Obrázek se nepodařilo nahrát");
                    return;
                }
            }
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
        }
    }
    private async Task AddCarImage(CarDTO carDetails)
    {

        foreach (var imageUrl in CarModel.ImageUrls)
        {
            CarImage = new CarImageDTO()
            {
                CarId = carDetails.Id,
                ImageUrl = imageUrl,
            };
            await CarImagesRepository.CreateCarImage(CarImage);
        }
    }
}
